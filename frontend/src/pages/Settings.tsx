import React from 'react';
import { useAuth } from '@/contexts/AuthContext';
import Header from '@/components/layout/Header';
import Sidebar from '@/components/layout/Sidebar';

/**
 * Interface para a√ß√µes de configura√ß√£o
 */
interface ConfigAction {
  readonly id: string;
  readonly title: string;
  readonly description: string;
  readonly icon: string;
  readonly href: string;
}

/**
 * P√°gina de Configura√ß√µes do Sistema
 * Acess√≠vel apenas para usu√°rios com permiss√£o SYSTEM_ADMIN
 * Seguindo princ√≠pios de Clean Code com responsabilidade √∫nica
 */
const Settings: React.FC = () => {
  const { hasPermission } = useAuth();
  const [isSidebarCollapsed, setIsSidebarCollapsed] = React.useState<boolean>(false);

  /**
   * Verifica se o usu√°rio tem permiss√£o para acessar configura√ß√µes
   */
  const canAccessSettings = (): boolean => {
    return hasPermission('SYSTEM_ADMIN');
  };

  /**
   * A√ß√µes de configura√ß√£o dispon√≠veis
   */
  const configActions: ConfigAction[] = [
    {
      id: 'users',
      title: 'Cadastro e Edi√ß√£o de Usu√°rios',
      description: 'Gerenciar usu√°rios do sistema, permiss√µes e fun√ß√µes',
      icon: 'üë•',
      href: '/settings/users'
    },
    {
      id: 'permissions',
      title: 'Cadastro e Edi√ß√£o de Permiss√µes',
      description: 'Gerenciar permiss√µes e pap√©is do sistema',
      icon: 'üîê',
      href: '/settings/permissions'
    },
    {
      id: 'origin-codes',
      title: 'Cadastro e Edi√ß√£o de C√≥digos de Origem',
      description: 'Administrar c√≥digos de origem para produtos e opera√ß√µes',
      icon: 'üè∑Ô∏è',
      href: '/settings/origin-codes'
    },
    {
      id: 'operations',
      title: 'Cadastro e Edi√ß√£o de C√≥digo de Opera√ß√£o',
      description: 'Gerenciar c√≥digos de opera√ß√£o do sistema',
      icon: '‚öôÔ∏è',
      href: '/settings/operations'
    },
    {
      id: 'stores',
      title: 'Cadastro e Edi√ß√£o de Lojas',
      description: 'Gerenciar lojas do sistema e suas configura√ß√µes',
      icon: 'üè™',
      href: '/settings/stores'
    },
    {
      id: 'email-notifiers',
      title: 'Cadastro de Notifica√ß√µes por Email',
      description: 'Gerenciar emails que receber√£o notifica√ß√µes de vendas',
      icon: 'üìß',
      href: '/settings/email-notifiers'
    }
  ];

  /**
   * Renderiza um card de a√ß√£o de configura√ß√£o
   * @param action - A√ß√£o de configura√ß√£o a ser renderizada
   */
  const renderConfigActionCard = (action: ConfigAction): React.ReactNode => (
    <div
      key={action.id}
      className="bg-white rounded-lg shadow-smart-md p-6 border border-smart-gray-100 hover:shadow-smart-lg transition-all duration-200 cursor-pointer group"
      onClick={() => handleConfigActionClick(action)}
    >
      <div className="text-center">
        <div className="text-4xl mb-4 group-hover:scale-110 transition-transform duration-200">
          {action.icon}
        </div>
        <h3 className="text-lg font-semibold text-smart-gray-800 mb-2 group-hover:text-smart-red-600 transition-colors duration-200">
          {action.title}
        </h3>
        <p className="text-sm text-smart-gray-600 leading-relaxed">
          {action.description}
        </p>
      </div>
    </div>
  );

  /**
   * Manipula o clique em uma a√ß√£o de configura√ß√£o
   * @param action - A√ß√£o clicada
   */
  const handleConfigActionClick = (action: ConfigAction): void => {
    // Navega para as p√°ginas espec√≠ficas
    if (action.id === 'users') {
      window.location.href = '/settings/users';
    } else if (action.id === 'permissions') {
      window.location.href = '/settings/permissions';
    } else if (action.id === 'origin-codes') {
      window.location.href = '/settings/origin-codes';
    } else if (action.id === 'operations') {
      window.location.href = '/settings/operations';
    } else if (action.id === 'stores') {
      window.location.href = '/settings/stores';
    } else if (action.id === 'email-notifiers') {
      window.location.href = '/settings/email-notifiers';
    }
  };

  /**
   * Renderiza o cabe√ßalho da p√°gina
   */
  const renderPageHeader = (): React.ReactNode => (
    <div className="mb-8">
      <h1 className="text-3xl font-bold text-smart-gray-800 mb-2">
        Configura√ß√µes do Sistema ‚öôÔ∏è
      </h1>
      <p className="text-smart-gray-600">
        Gerencie usu√°rios, c√≥digos e configura√ß√µes do sistema Smart Eletron.
      </p>
    </div>
  );

  /**
   * Renderiza o conte√∫do principal da p√°gina
   */
  const renderMainContent = (): React.ReactNode => (
    <main className="flex-1 p-6 bg-smart-gray-50 overflow-auto">
      {renderPageHeader()}
      
      {/* Grid de a√ß√µes de configura√ß√£o */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {configActions.map(renderConfigActionCard)}
      </div>
    </main>
  );

  // Verifica permiss√£o de acesso
  if (!canAccessSettings()) {
    return (
      <div className="h-screen flex flex-col bg-smart-gray-50">
        <Header isSidebarCollapsed={isSidebarCollapsed} />
        <div className="flex flex-1 overflow-hidden relative">
          <Sidebar onCollapseChange={setIsSidebarCollapsed} />
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center">
              <div className="text-6xl mb-4">üö´</div>
              <h1 className="text-2xl font-bold text-smart-gray-800 mb-2">
                Acesso Negado
              </h1>
              <p className="text-smart-gray-600">
                Voc√™ n√£o tem permiss√£o para acessar as configura√ß√µes do sistema.
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen flex flex-col bg-smart-gray-50">
      {/* Header */}
      <Header isSidebarCollapsed={isSidebarCollapsed} />
      
      {/* Layout principal */}
      <div className="flex flex-1 overflow-hidden relative">
        {/* Sidebar */}
        <Sidebar onCollapseChange={setIsSidebarCollapsed} />
        
        {/* Conte√∫do principal */}
        <div className="flex-1">
          {renderMainContent()}
        </div>
      </div>
    </div>
  );
};

export default Settings;
