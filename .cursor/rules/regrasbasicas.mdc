# Project Rules - Business API - Clean Code & Context7

## üéØ **Vis√£o Geral**
Este arquivo define as regras e boas pr√°ticas para o projeto Business API, seguindo princ√≠pios de Clean Code e Context7 para Spring Boot.

## üìã **Estrutura do Projeto**

### **Organiza√ß√£o de Pacotes**
```
com.sysconard.business/
‚îú‚îÄ‚îÄ config/          # Configura√ß√µes do Spring Boot
‚îú‚îÄ‚îÄ controller/      # Controllers REST
‚îú‚îÄ‚îÄ dto/            # Data Transfer Objects
‚îú‚îÄ‚îÄ entity/         # Entidades JPA
‚îú‚îÄ‚îÄ exception/      # Exce√ß√µes customizadas
‚îú‚îÄ‚îÄ factory/        # Factories para cria√ß√£o de objetos
‚îú‚îÄ‚îÄ mapper/         # Mappers para convers√£o de DTOs
‚îú‚îÄ‚îÄ repository/     # Repositories JPA
‚îî‚îÄ‚îÄ service/        # Servi√ßos de neg√≥cio
```

## üîß **Tecnologias e Depend√™ncias**

### **Spring Boot 3.x**
- Java 17+
- Spring Security com JWT
- Spring Data JPA
- Bean Validation
- Flyway para migra√ß√µes

### **Lombok**
- Reduzir boilerplate em entidades e DTOs complexos
- Anota√ß√µes: `@Data`, `@Builder`, `@NoArgsConstructor`, `@AllArgsConstructor`
- `@Builder.Default` para valores padr√£o

### **Records**
- Para DTOs simples (at√© 5 campos)
- Imutabilidade nativa
- Valida√ß√µes no construtor compacto

## üìù **Padr√µes de C√≥digo**

### **1. Entidades JPA**
```java
@Entity
@Table(name = "table_name")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class EntityName {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String name;
    
    @Builder.Default
    private boolean isActive = true;
    
    // M√©todos de neg√≥cio apenas
    public void addItem(Item item) { /* ... */ }
    public boolean hasPermission(String permission) { /* ... */ }
}
```

### **2. DTOs - Abordagem H√≠brida**

#### **Records para DTOs Simples (‚â§5 campos)**
```java
public record SimpleDto(
    String field1,
    String field2,
    Set<String> field3
) {
    public SimpleDto {
        if (field1 == null || field1.trim().isEmpty()) {
            throw new IllegalArgumentException("Field1 n√£o pode ser nulo ou vazio");
        }
        // ... outras valida√ß√µes
    }
}
```

#### **Lombok para DTOs Complexos (>5 campos ou com valida√ß√µes Bean)**
```java
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ComplexDto {
    
    @NotBlank(message = "Campo √© obrigat√≥rio")
    @Size(min = 2, max = 100, message = "Campo deve ter entre 2 e 100 caracteres")
    private String field;
    
    @Email(message = "Email deve ser v√°lido")
    private String email;
    
    @Override
    public String toString() {
        return "ComplexDto{" +
                "field='" + field + '\'' +
                ", email='[PROTECTED]'" +
                '}';
    }
}
```

### **3. Servi√ßos - Clean Code**

#### **Separa√ß√£o de Responsabilidades**
```java
@Service
public class BusinessService {
    
    private final ValidationService validationService;
    private final MapperService mapperService;
    private final FactoryService factoryService;
    
    public BusinessService(ValidationService validationService, 
                         MapperService mapperService,
                         FactoryService factoryService) {
        this.validationService = validationService;
        this.mapperService = mapperService;
        this.factoryService = factoryService;
    }
    
    public ResponseDto createEntity(RequestDto request) {
        // 1. Valida√ß√£o
        validationService.validateRequest(request);
        
        // 2. Cria√ß√£o da entidade
        Entity entity = factoryService.createEntity(request);
        
        // 3. Persist√™ncia
        Entity savedEntity = repository.save(entity);
        
        // 4. Mapeamento para resposta
        return mapperService.toResponse(savedEntity);
    }
}
```

### **4. Controllers REST**
```java
@RestController
@RequestMapping("/api/v1/resource")
@PreAuthorize("hasRole('ADMIN')")  // Seguran√ßa por m√©todo
public class ResourceController {
    
    private final BusinessService businessService;
    
    @PostMapping
    public ResponseEntity<ResponseDto> createResource(@Valid @RequestBody RequestDto request) {
        ResponseDto response = businessService.createEntity(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }
}
```

### **5. Exce√ß√µes Customizadas**
```java
public class CustomException extends RuntimeException {
    
    private final String field;
    private final String value;
    
    public CustomException(String field, String value) {
        super(String.format("%s '%s' n√£o encontrado", field, value));
        this.field = field;
        this.value = value;
    }
}
```

### **6. Global Exception Handler**
```java
@RestControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ApiErrorResponse> handleValidationExceptions(
            MethodArgumentNotValidException ex, WebRequest request) {
        
        Map<String, String> fieldErrors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            fieldErrors.put(fieldName, errorMessage);
        });
        
        ApiErrorResponse errorResponse = new ApiErrorResponse(
            "ERROR",
            "Erro de valida√ß√£o dos dados",
            request.getDescription(false),
            fieldErrors
        );
        
        return ResponseEntity.badRequest().body(errorResponse);
    }
}
```

## üîí **Seguran√ßa**

### **Spring Security**
```java
@Configuration
@EnableMethodSecurity
public class SecurityConfig {
    
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/public/**").permitAll()
                .requestMatchers("/api/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
            )
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            );
        
        return http.build();
    }
}
```

### **Autoriza√ß√£o por M√©todo**
```java
@PreAuthorize("hasRole('ADMIN')")
@PreAuthorize("hasAuthority('USER_CREATE')")
@PreAuthorize("hasRole('ADMIN') and hasAuthority('USER_DELETE')")
```

## üß™ **Testes**

### **Testes Unit√°rios**
```java
@ExtendWith(MockitoExtension.class)
class ServiceTest {
    
    @Mock
    private Repository repository;
    
    @Mock
    private ValidationService validationService;
    
    @InjectMocks
    private BusinessService businessService;
    
    @Test
    void shouldCreateEntitySuccessfully() {
        // Given
        RequestDto request = RequestDto.builder()
            .name("Test")
            .email("test@email.com")
            .build();
        
        Entity entity = Entity.builder()
            .id(1L)
            .name("Test")
            .build();
        
        // When
        when(validationService.validateRequest(request)).thenReturn(true);
        when(repository.save(any(Entity.class))).thenReturn(entity);
        
        ResponseDto response = businessService.createEntity(request);
        
        // Then
        assertThat(response).isNotNull();
        assertThat(response.getName()).isEqualTo("Test");
        verify(validationService).validateRequest(request);
        verify(repository).save(any(Entity.class));
    }
}
```

### **Testes de Integra√ß√£o**
```java
@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Transactional
class ControllerIntegrationTest {
    
    @Autowired
    private MockMvc mockMvc;
    
    @Test
    void shouldReturn201WhenCreatingEntity() throws Exception {
        // Given
        RequestDto request = RequestDto.builder()
            .name("Test")
            .email("test@email.com")
            .build();
        
        // When & Then
        mockMvc.perform(post("/api/v1/entities")
                .contentType(MediaType.APPLICATION_JSON)
                .content(new ObjectMapper().writeValueAsString(request)))
            .andExpect(status().isCreated())
            .andExpect(jsonPath("$.name").value("Test"));
    }
}
```

## üìä **Valida√ß√µes**

### **Bean Validation**
```java
public class RequestDto {
    
    @NotBlank(message = "Nome √© obrigat√≥rio")
    @Size(min = 2, max = 100, message = "Nome deve ter entre 2 e 100 caracteres")
    private String name;
    
    @NotBlank(message = "Email √© obrigat√≥rio")
    @Email(message = "Email deve ser v√°lido")
    @Size(max = 100, message = "Email deve ter no m√°ximo 100 caracteres")
    private String email;
    
    @NotBlank(message = "Senha √© obrigat√≥ria")
    @Size(min = 6, max = 100, message = "Senha deve ter entre 6 e 100 caracteres")
    private String password;
    
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "Username deve conter apenas letras, n√∫meros e underscore")
    private String username;
}
```

## üóÑÔ∏è **Banco de Dados**

### **Flyway Migrations**
```sql
-- V1__Create_initial_tables.sql
CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    is_not_locked BOOLEAN DEFAULT TRUE,
    join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### **JPA Repositories**
```java
@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    
    Optional<User> findByUsername(String username);
    Optional<User> findByEmail(String email);
    boolean existsByUsername(String username);
    boolean existsByEmail(String email);
    
    @Query("SELECT u FROM User u WHERE u.isActive = true")
    List<User> findAllActiveUsers();
}
```

## üé® **Nomenclatura**

### **Classes e Interfaces**
- **Controllers**: `*Controller`
- **Services**: `*Service`
- **Repositories**: `*Repository`
- **Entities**: Nome singular (ex: `User`, `Role`)
- **DTOs**: `*Request`, `*Response`
- **Exceptions**: `*Exception`

### **M√©todos**
- **Controllers**: `create*`, `update*`, `delete*`, `get*`, `find*`
- **Services**: `create*`, `update*`, `delete*`, `find*`, `validate*`
- **Repositories**: `findBy*`, `existsBy*`, `countBy*`

### **Vari√°veis**
- **Boolean**: `isActive`, `isNotLocked`, `hasPermission`
- **Collections**: `users`, `roles`, `permissions`
- **IDs**: `userId`, `roleId`

## üìù **Documenta√ß√£o**

### **JavaDoc**
```java
/**
 * Servi√ßo respons√°vel pela gest√£o de usu√°rios.
 * Implementa opera√ß√µes CRUD e valida√ß√µes de neg√≥cio.
 * 
 * @author Seu Nome
 * @version 1.0
 * @since 2025-01-01
 */
@Service
public class UserService {
    
    /**
     * Cria um novo usu√°rio no sistema.
     * 
     * @param request Dados do usu√°rio a ser criado
     * @return Dados do usu√°rio criado
     * @throws UserAlreadyExistsException se o username ou email j√° existirem
     * @throws RoleNotFoundException se alguma role n√£o for encontrada
     */
    public CreateUserResponse createUser(CreateUserRequest request) {
        // implementa√ß√£o
    }
}
```

## üîÑ **Versionamento**

### **API Versioning**
```java
@RestController
@RequestMapping("/api/v1/users")  // Versionamento na URL
public class UserControllerV1 { }

@RestController
@RequestMapping("/api/v2/users")
public class UserControllerV2 { }
```

### **Semantic Versioning**
- **MAJOR**: Mudan√ßas incompat√≠veis
- **MINOR**: Novas funcionalidades compat√≠veis
- **PATCH**: Corre√ß√µes de bugs compat√≠veis

## üöÄ **Performance**

### **Lazy Loading**
```java
@ManyToMany(fetch = FetchType.LAZY)
private Set<Role> roles;
```

### **Indexes**
```sql
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_active ON users(is_active);
```

## üîç **Logging**

### **SLF4J + Logback**
```java
private static final Logger logger = LoggerFactory.getLogger(ServiceName.class);

logger.info("Iniciando cria√ß√£o de usu√°rio: {}", username);
logger.warn("Tentativa de criar usu√°rio j√° existente: {}", username);
logger.error("Erro inesperado: {}", ex.getMessage(), ex);
```

## üì¶ **Empacotamento**

### **Maven**
```xml
<groupId>com.sysconard</groupId>
<artifactId>business-api</artifactId>
<version>1.0.0</version>
<packaging>jar</packaging>
```

### **Docker**
```dockerfile
FROM openjdk:17-jdk-slim
COPY target/business-api-1.0.0.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "/app.jar"]
```

## ‚úÖ **Checklist de Qualidade**

### **Antes do Commit**
- [ ] C√≥digo compila sem erros
- [ ] Todos os testes passam
- [ ] Cobertura de testes ‚â• 80%
- [ ] Valida√ß√µes implementadas
- [ ] Tratamento de exce√ß√µes
- [ ] Documenta√ß√£o atualizada
- [ ] Logs apropriados
- [ ] Seguran√ßa implementada

### **Code Review**
- [ ] Princ√≠pios SOLID aplicados
- [ ] Clean Code seguido
- [ ] Performance considerada
- [ ] Seguran√ßa verificada
- [ ] Testes adequados
- [ ] Documenta√ß√£o clara

## üéØ **M√©tricas de Qualidade**

### **Cobertura de C√≥digo**
- **M√≠nimo**: 80%
- **Ideal**: 90%+

### **Complexidade Ciclom√°tica**
- **M√©todos**: ‚â§ 10
- **Classes**: ‚â§ 50

### **Linhas por M√©todo**
- **M√°ximo**: 20 linhas
- **Ideal**: 10 linhas

### **Par√¢metros por M√©todo**
- **M√°ximo**: 5 par√¢metros
- **Ideal**: 3 par√¢metros

---

**√öltima Atualiza√ß√£o**: 28/08/2025  
**Vers√£o**: 1.0  
**Respons√°vel**: Equipe de Desenvolvimento
